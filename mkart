#!/usr/bin/env python3
##############################################################################
# ----------------------------------------------------------------------------
#   Electric Art Generator & Dev Server
# ----------------------------------------------------------------------------
#
#   Copyright (c) 2024-2025 Daniel Li
#
#   This software is available under the MIT License.
#
#   Dependencies:
#     - imagemagick <https://imagemagick.org>
#
#   Additional dependencies for dev server:
#     - websockets <https://pypi.org/project/websockets/>
#
##############################################################################

import builtins
import itertools
import optparse
import os
import shlex
import subprocess
import sys

GROUPS = ('core',) # TODO: add extra

input_file = 'art.txt'

def main():
    parser = optparse.OptionParser()
    parser.add_option('-d', '--dump', action='store_true', help='dump generated script to stdout')
    parser.add_option('-s', '--serve', action='store_true', help='start dev server')
    parser.add_option('--expose', dest='host', action='store_const', const='', help='listen on all interfaces')
    parser.add_option('--host', default='127.0.0.1', help='server host')
    parser.add_option('--port', type=int, default=5050, help='server port')
    opts, groups = parser.parse_args()
    if groups:
        for group in groups:
            if group not in GROUPS:
                parser.error(f'invalid group {group!r}')
    else:
        groups = GROUPS
    if opts.serve:
        dev(opts.host, opts.port, groups[0])
    else:
        build(groups, opts.dump)

##############################################################################
# Core
##############################################################################

def build(groups, dump=False):
    with open(input_file) as f:
        generator = compile(f)
    for group in groups:
        output_file = os.path.join(group, 'folder.jpg')
        script = ' '.join(
            shlex.quote(token) for token in
            itertools.chain(generator(group), ['-write', output_file]))
        if dump:
            sys.stdout.write(script)
            sys.stdout.write('\n')
        else:
            subprocess.run(
                ['magick', '-script', '-'],
                text=True,
                input=script,
                check=True)

def compile_macro(lex, macros):
    body = []
    for token in lex:
        if token == '-def':
            name = next(lex)
            if next(lex) != '{':
                raise ValueError('Expected \'{\'')
            macros[name] = compile_macro(lex, macros)
        elif token == '-exec':
            label = f'<exec, line {lex.lineno}>'
            code = builtins.compile(next(lex), label, 'exec')
            body.append(('exec', code))
        elif token == '-eval':
            label = f'<eval, line {lex.lineno}>'
            code = builtins.compile(next(lex), label, 'eval')
            body.append(('eval', code))
        elif token == '-inject':
            label = f'<inject, line {lex.lineno}>'
            name, _, arg = next(lex).partition(':')
            macro = macros[name]
            code = builtins.compile(arg, label, 'eval') if arg else None
            body.append(('inject', macro, code))
        elif token == '{':
            body.append(('context', compile_macro(lex, macros)))
        elif token == '}':
            break
        else:
            body.append(token)
    return body

def execute_macro(body, scope, top=False):
    for item in body:
        if not isinstance(item, tuple):
            yield item
            continue
        if item[0] == 'exec':
            exec(item[1], scope)
        elif item[0] == 'eval':
            yield str(eval(item[1], scope))
        elif item[0] == 'inject':
            if item[2]:
                arg = eval(item[2], scope)
            mscope = scope.copy()
            mscope['arg'] = arg
            yield from execute_macro(item[1], mscope, top)
        elif top:
            yield shlex.join(execute_macro(item[1], scope))
        else:
            yield 'push'
            yield 'graphic-context'
            yield from execute_macro(item[1], scope)
            yield 'pop'
            yield 'graphic-context'

class compile:
    def __init__(self, f):
        lex = shlex.shlex(f, posix=True)
        lex.whitespace_split = True
        self.body = compile_macro(lex, {})

    def __call__(self, group):
        return execute_macro(self.body, {'group': group}, True)

##############################################################################
# Server
##############################################################################

page = br'''
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>mkart</title>
  <link rel="icon" href="data:,">
<style>
body { margin: 1rem; }
img { display: block; }
</style>
</head>
<body>
<script>
const image = document.createElement('img');
document.body.append(image);
const ws = new WebSocket('/ws');
ws.onmessage = ({ data }) => {
  if (data instanceof Blob) {
    console.log('Updating');
    URL.revokeObjectURL(image.src);
    image.src = URL.createObjectURL(data.slice(0, data.size, 'image/png'));
  } else {
    console.error(data);
  }
};
ws.onclose = () => {
  console.log('Attempting to reconnect...');
  fetch('/ok').then(
    () => location.reload(),
    () => setTimeout(ws.onclose, 1000));
};
</script>
</body>
</html>
'''

def dev(host, port, group):
    import asyncio
    import html
    import logging
    import traceback
    from websockets.asyncio.server import broadcast, serve
    from websockets.datastructures import Headers
    from websockets.http11 import Response

    server = None
    image = None

    logging.basicConfig(
        format='%(levelname)s: %(message)s',
        level=logging.INFO)

    def send(message):
        broadcast(server.connections, message)

    async def update():
        nonlocal image
        with open(input_file) as f:
            generator = compile(f)
        script = ' '.join(
            shlex.quote(token) for token in
            itertools.chain(generator(group), ['-write', 'png:-']))
        process = await asyncio.subprocess.create_subprocess_exec(
            'magick', '-script', '-',
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE)
        (stdout, stderr) = await process.communicate(script.encode('utf-8'))
        if process.returncode != 0:
            raise Exception(stderr.decode('utf-8'))
        image = stdout

    async def watch():
        last_mtime = None
        sleep = False
        while True:
            if sleep:
                await asyncio.sleep(0.3)
            sleep = True
            try:
                mtime = os.stat(input_file).st_mtime_ns
                if mtime == last_mtime:
                    continue
                last_mtime = mtime
                await update()
            except:
                send(traceback.format_exc())
            else:
                send(image)

    async def handler(conn):
        if image is not None:
            await conn.send(image)
        await conn.wait_closed()

    def process_request(conn, req):
        if req.path == '/':
            return Response(200, 'OK', Headers({ 'content-type': 'text/html' }), page)
        elif req.path == '/ws':
            return None
        else:
            return Response(404, 'Not Found', Headers({ 'content-type': 'text/plain' }), b'Not Found')

    async def main():
        nonlocal server
        server = await serve(
            handler, host, port,
            process_request=process_request)
        await asyncio.gather(
            server.serve_forever(),
            watch())

    try: asyncio.run(main())
    except KeyboardInterrupt: pass

##############################################################################

if __name__ == '__main__':
    main()

# vim:tw=78
