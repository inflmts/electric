#!/usr/bin/env python3
##############################################################################
#
#         ,/
#       ,'/
#     ,' /___,  888888 88     888888  dP""b8 888888 88""Yb 88  dP""b8
#   .'__   ,'   88__   88     88__   dP   `"   88   88__dP 88 dP   `"
#      / ,'     88""   88  .o 88""   Yb        88   88"Yb  88 Yb
#     /,'       888888 88ood8 888888  YboodP   88   88  Yb 88  YboodP
#    /'
#
# ----------------------------------------------------------------------------
#                           Music Library Manager
# ----------------------------------------------------------------------------
#
#   Copyright (c) 2024-2025 Daniel Li
#
#   This software is available under the MIT License.
#
#   Dependencies:
#     - python 3.8
#     - click
#     - ffmpeg: for import
#     - yt-dlp (optional): import from youtube
#     - adb (optional): for adb backend
#
##############################################################################

import click
from collections import Counter, namedtuple
import datetime
import hashlib
import itertools
import os
import re
import shutil
import subprocess
import sys
import zlib

# output newline on all platforms
sys.stdout.reconfigure(newline='\n')

default_root = os.path.dirname(os.path.realpath(__file__))

# The list of valid groups.
GROUPS = ('core', 'extra')

song_file_regex = re.compile(r'[0-9a-z\.-]*\.[0-9a-f]{16}\.mp3')
id_regex = re.compile(r'[1-9][0-9]*')
artist_regex = re.compile(r'[0-9a-z]+(?:-[0-9a-z]+)*')
title_regex = artist_regex
date_regex = re.compile(r'([0-9]{4})-([0-9]{2})-([0-9]{2})')
mhash_regex = re.compile(r'[0-9a-f]{64}')

##############################################################################
# Utility Functions
##############################################################################

def err(message):
    sys.stderr.write(f'\033[1;31merror:\033[0m {message}\n')

def warn(message):
    sys.stderr.write(f'\033[1;33mwarning:\033[0m {message}\n')

def msg(message):
    sys.stderr.write(f'{message}\n')

def die(message, returncode=1):
    err(message)
    sys.exit(returncode)

def confirm(prompt, default=False):
    """Prompt the user for confirmation.

    If the response is empty (ie. the user simply pressed Enter),
    the specified default is returned if provided, otherwise False.
    If the response is 'Y' or 'y', returns True, otherwise returns False.
    """
    options = '[Y/n]' if default else '[y/N]'
    sys.stderr.write(f'{prompt} {options} ')
    reply = input()
    return default if len(reply) == 0 else reply == 'y' or reply == 'Y'

def safe_rename(src, dest):
    # not actually safe
    if os.path.exists(dest):
        raise FileExistsError(dest)
    os.rename(src, dest)

def copy_and_sha256(srcf, destf):
    sha256 = hashlib.sha256()
    while chunk := srcf.read(65536):
        sha256.update(chunk)
        if destf is not None:
            destf.write(chunk)
    return sha256.hexdigest()

##############################################################################
# ID3
##############################################################################

id3_header = b'ID3\x04\x00\x00\x00\x00\x01\x76'

def id3_encode_uint28(x):
    return bytes((x >> 21 & 0x7f, x >> 14 & 0x7f, x >> 7 & 0x7f, x & 0x7f))

def id3_encode_frame(id, content):
    return id + id3_encode_uint28(len(content)) + b'\x00\x00' + content

def id3_encode_text(id, content):
    return id3_encode_frame(id, b'\x03' + content.encode('utf-8') + b'\x00')

def id3_encode(tags):
    """Encode song tags as a 256-byte ID3v2.4.0 header."""
    data = (id3_header
        + id3_encode_text(b'TIT2', tags.title)
        + id3_encode_text(b'TPE1', tags.artist)
        + id3_encode_text(b'TALB', tags.album))
    if len(data) > 256:
        raise ValueError('ID3 tag exceeds 256 bytes')
    data = data.ljust(256, b'\x00')
    assert len(data) == 256
    return data

##############################################################################
# Songs
##############################################################################

SongTags = namedtuple('SongTags', ('title', 'artist', 'album'))

class Song:
    """
    Represents a song in the catalog.

    All attributes are readonly except for `mhash`. Note that changing `mhash`
    will cause the computed path to change as well. `mhash` may be None, which
    indicates that the song does not have an associated file; this could mean
    that the song is currently being imported.
    """

    def __init__(self, id, group, artist, title, date, mhash):
        self.id = id
        self.group = group
        self.artist = artist
        self.title = title
        self.date = date
        self.mhash = mhash

        # The artist name and song title are generated by converting their
        # respective identifiers to uppercase and replacing dashes with
        # spaces. For the vast majority of cases, this works fabulously.
        self.tags = SongTags(
            title.upper().replace('-', ' '),
            artist.upper().replace('-', ' '),
            self.eid)
        self.tdata = id3_encode(self.tags)
        self.thash = '%04x' % (zlib.crc32(self.tdata) >> 16 & 0xffff)

    def __str__(self):
        return f'{self.eid}[{self.group}.{self.artist}.{self.title}]'

    @property
    def eid(self):
        return f'E{self.id:04}'

    @property
    def mabbrev(self):
        if self.mhash is None:
            raise TypeError(f'Song {self} does not have a mhash')
        return self.mhash[:12]

    @property
    def path(self):
        return f'{self.group}/{self.artist}.{self.title}.{self.mabbrev}{self.thash}.mp3'

    def write(self, f):
        id = self.id
        group = self.group
        artist = self.artist
        title = self.title
        date = self.date.strftime('%Y-%m-%d')
        mhash = '-' if self.mhash is None else self.mhash
        f.write(f'{id} {group} {artist} {title} {date} {mhash}\n')

##############################################################################
# Catalog
##############################################################################

class CatalogError(Exception):
    pass

class Catalog:
    def __init__(self, file=None):
        self.file = file
        self._songs = []

    def __len__(self):
        return len(self._songs)

    def __getitem__(self, id):
        return self._songs[id - 1]

    def __iter__(self):
        return iter(self._songs)

    def __reversed__(self):
        return reversed(self._songs)

    def __contains__(self, id):
        return id <= len(self._songs)

    @property
    def nextid(self):
        return len(self._songs) + 1

    def add(self, id, group, artist, title, date, mhash):
        if id != self.nextid:
            raise CatalogError(f'Attempted to add id {id}, expected {self.nextid}')
        song = Song(id, group, artist, title, date, mhash)
        self._songs.append(song)
        return song

    def register(self, group, artist, title, mhash):
        date = datetime.date.today()
        return self.add(self.nextid, group, artist, title, date, mhash)

    def get(self, id):
        return self._songs[id - 1] if id <= len(self._songs) else None

    def write(self, f):
        """Write the catalog to a file object."""
        for song in self:
            song.write(f)

    def save(self):
        if self.file is None:
            raise TypeError('Catalog has no file')
        tmpfile = self.file + '.lock'
        tmpf = open(tmpfile, 'x', newline='\n')
        try:
            with tmpf:
                self.write(tmpf)
        except:
            os.remove(tmpfile)
            raise
        os.replace(tmpfile, self.file)


def read_catalog(f, file=None):
    """Read the catalog from a file object."""

    catalog = Catalog(file)
    lineno = 0

    def fail(message):
        raise CatalogError(f'Failed to load catalog: line {lineno}: {message}')

    for line in f:
        # increment line number before the loop to catch continue
        lineno += 1
        # remove trailing newline
        line = line[:-1]

        fields = line.split(' ')
        if len(fields) != 6:
            fail(f'Expected 6 fields but {len(fields)} present')
        id, group, artist, title, date, mhash = fields

        if not id_regex.fullmatch(id):
            fail(f'Invalid id {id!r}')
        id = int(id)

        if group not in GROUPS:
            fail(f'Invalid group {group!r}')

        if not artist_regex.fullmatch(artist):
            fail(f'Invalid artist {artist!r}')

        if not title_regex.fullmatch(title):
            fail(f'Invalid title {title!r}')

        if not (match := date_regex.fullmatch(date)):
            fail(f'Invalid date {date!r}')
        y, m, d = match.groups()
        date = datetime.date(int(y), int(m), int(d))

        if not mhash_regex.fullmatch(mhash):
            fail(f'Invalid mhash {mhash!r}')

        try:
            catalog.add(id, group, artist, title, date, mhash)
        except CatalogError as e:
            fail(e)

    return catalog

class File:
    def __init__(self, path):
        # `path` MUST be a valid path
        self.path = path
        self.mabbrev = path[-20:-8]
        self.thash = path[-8:-4]

def plan_update(catalog, paths, source=None, *, prune=False):
    """
    Determine the operations required to satisfy the catalog given an iterable
    of existing paths and an optional list of paths on a source to retrieve
    missing files from. Returns a tuple with three items:

        transfers: list of (src, dest), None if source is None
        renames: list of (src, dest, tdata), tdata may be None
        prunes: list of paths to delete
    """

    files = {path: File(path) for path in paths}

    # find songs without a file
    missing = []
    for song in catalog:
        # ignore songs without an associated file
        if song.mhash is None:
            continue
        file = files.pop(song.path, None)
        if file is None:
            missing.append(song)

    # find files that can be renamed/retagged
    transfers = [] if source is not None else None
    renames = []
    for song in missing:
        for file in files.values():
            if file.mabbrev != song.mabbrev:
                continue
            retag = song.thash != file.thash
            del files[file.path]
            msg(f'\033[1;36m** {"retag" if retag else "rename"}:\033[0m {song}')
            renames.append((file.path, song.path, song.tdata if retag else None))
            break
        else:
            found = False
            if source is not None:
                for path in source:
                    if path == song.path:
                        msg(f'\033[1;36m** transfer:\033[0m {song}')
                        transfers.append((path, song.path))
                        found = True
                        break
            if not found:
                warn(f'unable to find source for {song}')

    # find files to prune
    prunes = []
    for file in files.values():
        if prune:
            msg(f'\033[1;31m** prune:\033[0m {file.path}')
            prunes.append(file.path)
        else:
            warn(f'extraneous file: {file.path}')

    return transfers, renames, prunes

def list_local(root):
    paths = []
    for group in GROUPS:
        for file in os.listdir(os.path.join(root, group)):
            file = os.path.normcase(file)
            path = f'{group}/{file}'
            if song_file_regex.fullmatch(file):
                paths.append(path)
            elif file != 'folder.jpg':
                warn(f'ignoring file {path!r}')
    return paths

def write_tdata(file, tdata):
    assert len(tdata) == 256
    with open(file, 'r+b') as f:
        if f.read(10) != id3_header:
            raise Exception('Invalid ID3 header')
        assert f.tell() == 10
        f.write(tdata[10:])

def execute_local_transfer(srcroot, destroot, transfers, verb):
    for src, dest in transfers:
        msg(f'{verb} {src} -> {dest}')
        srcfile = os.path.join(srcroot, src)
        destfile = os.path.join(destroot, dest)
        shutil.copyfile(srcfile, destfile)

def execute_update(root, renames, prunes):
    # process renames/retags
    for src, dest, tdata in renames:
        msg(f'Renaming {src} -> {dest}')
        srcfile = os.path.join(root, src)
        destfile = os.path.join(root, dest)
        if tdata is not None:
            write_tdata(srcfile, tdata)
        safe_rename(srcfile, destfile)

    # process prunes
    for path in prunes:
        msg(f'Removing {path}')
        os.remove(os.path.join(root, path))

##############################################################################
# Import
##############################################################################

class Importer:
    def __init__(self, root, catalog):
        self.root = root
        self.catalog = catalog
        self.import_file = os.path.join(self.root, 'import.mp3')

    def get(self, url):
        # make sure the import file doesn't exist
        open(self.import_file, 'xb').close()
        try:
            subprocess.run(
                ['ffmpeg', '-y',
                 '-hide_banner',
                 '-loglevel', 'warning',
                 '-stats',
                 '-i', url,
                 '-f', 'mp3',
                 '-c', 'copy',
                 '-id3v2_version', '0', # we handle metadata ourselves
                 self.import_file],
                check=True)
        except:
            os.remove(self.import_file)
            raise

    def commit(self, song, commit_message):
        srcfile = self.import_file
        tmpfile = os.path.join(self.root, 'import~1.mp3')
        finfile = os.path.join(self.root, 'import~2.mp3')

        # Normalize using ffmpeg. This does a few things:
        #
        #   - makes sure it's actually a mp3
        #   - removes the id3 header so we can add our own
        #   - gets a xing/info header so ffprobe doesn't complain
        #
        subprocess.run(
            ['ffmpeg', '-y',
             '-hide_banner',
             '-loglevel', 'warning',
             '-stats',
             '-i', srcfile,
             '-f', 'mp3',
             '-c', 'copy',
             '-id3v2_version', '0', # we handle metadata ourselves
             tmpfile],
            check=True)

        with (open(tmpfile, 'rb') as tmpf, open(finfile, 'wb') as finf):
            # write metadata and calculate mhash
            finf.write(song.tdata)
            mhash = copy_and_sha256(tmpf, finf)

        # the correct `destfile` is only known after calculating the mhash
        song.mhash = mhash
        destfile = os.path.join(self.root, song.path)
        safe_rename(finfile, destfile)

        # save catalog
        self.catalog.save()

        # cleanup
        os.remove(srcfile)
        os.remove(tmpfile)

        # commit
        subprocess.run(
            ['git', '-C', self.root, 'commit',
             '-m', commit_message, 'catalog.txt'],
            check=True)

    def add(self, group, artist, title):
        song = self.catalog.register(group, artist, title, None)
        self.commit(song, f'catalog: add {song.id}')

    def replace(self, song):
        self.commit(song, f'catalog: replace {song.id}')

##############################################################################
# Backends
##############################################################################

backends = {}

def backend(name):
    def decorator(cls):
        backends[name] = cls
        return cls
    return decorator

# Backends must implement these methods:
#
#   list()
#       Returns a list of paths in the backend.
#
#   push(root, transfers, renames, prunes)
#       Executes the specified updates on the remote.
#           - transfers: list of (src, dest) of files to push
#               - src: local source path
#               - dest: remote destination path
#           - renames: list of (src, dest, tdata) of files to rename
#               - src: remote source path
#               - dest: remote destination path
#               - tdata: None or the binary ID3 tags to write to the file
#           - prunes: list of paths to remove
#
#   pull(root, transfers)
#       Retrieves files from the remote.
#           - transfers: list of (src, dest) of files to pull
#               - src: remote source path
#               - dest: local destination path
#

@backend('file')
class FileBackend:
    def __init__(self, root):
        self.root = root

    @classmethod
    def create(cls, param):
        return cls(param)

    def list(self):
        return list_local(self.root)

    def push(self, root, transfers, renames, prunes):
        execute_local_transfer(root, self.root, transfers, 'Pushing')
        execute_update(self.root, renames, prunes)

    def pull(self, root, transfers):
        execute_local_transfer(self.root, root, transfers, 'Pulling')

@backend('adb')
class AdbBackend:
    def __init__(self, root=None):
        self.root = root if root is not None else '/storage/emulated/0/Music'

    @classmethod
    def create(cls, param):
        return cls(param or None)

    def list(self):
        output = subprocess.run(
            ['adb', 'shell'],
            input=f'cd \'self.root\' && '
                  f'find {" ".join(GROUPS)} -mindepth 1 -maxdepth 1 -name "*.mp3"',
            stdout=subprocess.PIPE,
            text=True, check=True).stdout
        return [path for path in output.splitlines()
                     if song_file_regex.fullmatch(path.partition('/')[2])]

    def push(self, root, transfers, renames, prunes):
        for src, dest in transfers:
            msg(f'Pushing {src} -> {dest}')
            srcfile = os.path.join(root, src)
            subprocess.run(['adb', 'push', srcfile, f'{self.root}/{dest}'], check=True)

        commands = [f'set -eC\ncd \'self.root\'\n']
        for src, dest, tdata in renames:
            commands.append(f'echo >&2 "Renaming {src} -> {dest}"\n')
            if tdata is not None:
                escaped = ''.join(f'\\x{b:02x}' for b in tdata)
                commands.append(f'echo -ne \'{escaped}\' 1<> {src}')
            commands.append(f'mv -nT {src} {dest}\n')
        if prunes:
            commands.append(f'rm -v {" ".join(prunes)}\n')

        subprocess.run(
            ['adb', 'shell'],
            input=''.join(commands),
            text=True)

    def pull(self, root, transfers):
        for src, dest in transfers:
            msg(f'Pulling {src} -> {dest}')
            destfile = os.path.join(root, dest)
            subprocess.run(['adb', 'pull', src, destfile], check=True)

##############################################################################
# Command-Line Parsing
##############################################################################

class Context:
    def __init__(self, root):
        self.root = root
        self.catalog_file = os.path.join(root, 'catalog.txt')

    def load_catalog(self):
        with open(self.catalog_file) as f:
            return read_catalog(f, self.catalog_file)

    def create_backend(self, param):
        name = 'file'
        mat = re.match(r'^[a-z]+:', param)
        if mat:
            name = param[:mat.end() - 1]
            param = param[mat.end():]
        cls = backends.get(name)
        if cls is None:
            err(f'unrecognized backend name {name!r}')
            sys.exit(1)
        return cls.create(param)

@click.group()
@click.option('-r', '--root', metavar='DIR', default=default_root, show_default=True, help='root directory')
@click.pass_context
def main(ctx, root):
    ctx.obj = Context(root)

#-----------------------------------------------------------------------------
# Command: get
#-----------------------------------------------------------------------------

@main.command('get')
@click.option('-o', '--open', 'launch', is_flag=True, help='open downloaded file')
@click.argument('url')
@click.pass_obj
def _(context, launch, url):
    """Download a song for import."""
    catalog = context.load_catalog()
    importer = Importer(context.root, catalog)
    if os.path.exists(importer.import_file):
        die(f'import in progress')
    importer.get(url)
    if launch:
        click.launch(importer.import_file)

#-----------------------------------------------------------------------------
# Command: open
#-----------------------------------------------------------------------------

@main.command('open')
@click.pass_obj
def _(context):
    """Open the file to be imported."""
    catalog = context.load_catalog()
    importer = Importer(context.root, catalog)
    if not os.path.exists(importer.import_file):
        die(f'nothing to import')
    click.launch(importer.import_file)

#-----------------------------------------------------------------------------
# Command: add
#-----------------------------------------------------------------------------

@main.command('add')
@click.option('-x', '--extra', is_flag=True, help='register in extra group')
@click.argument('artist')
@click.argument('title')
@click.pass_obj
def _(context, extra, artist, title):
    """Add a song to the library."""
    group = 'extra' if extra else 'core'
    if not artist_regex.fullmatch(artist):
        die(f'invalid artist {artist!r}')
    if not title_regex.fullmatch(title):
        die(f'invalid title {title!r}')
    importer = Importer(context.root, context.load_catalog())
    if not os.path.exists(importer.import_file):
        die(f'nothing to import')
    importer.add(group, artist, title)

#-----------------------------------------------------------------------------
# Command: replace
#-----------------------------------------------------------------------------

@main.command('replace')
@click.argument('id', type=int)
@click.pass_obj
def _(context, id):
    """Replace an existing song in the library."""
    catalog = context.load_catalog()
    song = catalog.get(id)
    if song is None:
        die(f'no such song: {id}')
    importer = Importer(context.root, catalog)
    if not os.path.exists(importer.import_file):
        die(f'nothing to import')
    importer.replace(song)

#-----------------------------------------------------------------------------
# Command: update
#-----------------------------------------------------------------------------

@main.command('update')
@click.option('-n', '--dry-run', is_flag=True, help='do nothing, only show what would happen')
@click.option('-y', '--yes', is_flag=True, help='do not prompt for confirmation')
@click.option('--prune', is_flag=True, help='prune extraneous music files')
@click.argument('remote', required=False)
@click.pass_obj
def _(context, dry_run, yes, prune, remote):
    """Update the music library."""
    root = context.root
    catalog = context.load_catalog()

    files = list_local(root)
    remote_files = None
    if remote is not None:
        backend = context.create_backend(remote)
        remote_files = backend.list()
    transfers, renames, prunes = plan_update(catalog, files, remote_files, prune=prune)
    if dry_run or not (transfers or renames or prunes):
        return
    if not (yes or confirm('Proceed?', True)):
        sys.exit(2)
    if transfers:
        backend.pull(root, transfers)
    execute_update(root, renames, prunes)

#-----------------------------------------------------------------------------
# Command: push
#-----------------------------------------------------------------------------

@main.command('push')
@click.option('-n', '--dry-run', is_flag=True, help='do nothing, only show what would happen')
@click.option('-y', '--yes', is_flag=True, help='do not prompt for confirmation')
@click.option('--prune', is_flag=True, help='prune extraneous files')
@click.argument('remote')
@click.pass_obj
def _(context, dry_run, yes, prune, remote):
    """Send files to a remote."""
    root = context.root
    catalog = context.load_catalog()
    backend = context.create_backend(remote)

    files = list_local(root)
    remote_files = backend.list()
    transfers, renames, prunes = plan_update(catalog, remote_files, files, prune=prune)
    if dry_run or not (transfers or renames or prunes):
        return
    if not (yes or confirm('Proceed?', True)):
        sys.exit(2)
    backend.push(root, transfers, renames, prunes)

#-----------------------------------------------------------------------------
# Command: info
#-----------------------------------------------------------------------------

@main.command('info')
@click.option('-l', '--latest', default=10, metavar='N', show_default=True, help='show N latest songs')
@click.option('-a', '--artists', default=0, metavar='N', help='show N most common artists')
@click.argument('songs', type=int, nargs=-1)
@click.pass_obj
def _(context, latest, artists, songs):
    """Print information about the catalog."""
    catalog = context.load_catalog()

    if songs:
        for id in songs:
            song = catalog.get(id)
            if song is None:
                msg(f'{id}: not found')
                continue
            print(f'{song} added {song.date}')
        return

    print(f'{len(catalog)} songs')

    if latest > 0:
        print(f'\nLatest {latest} songs:')
        for song in itertools.islice(reversed(catalog), latest):
            print(f'  {song.eid}  {song.date}  {song.group:5}  {song.artist}.{song.title}')

    if artists > 0:
        counter = Counter(song.artist for song in catalog)
        top = counter.most_common(artists)
        width = max(len(artist) for artist, count in top)
        print(f'\nTop {artists} artists:')
        for artist, count in counter.most_common(artists):
            print(f'  {artist.rjust(width)}  {"*" * count} ({count})')

#-----------------------------------------------------------------------------
# Command: ls-remote
#-----------------------------------------------------------------------------

@main.command('ls-remote', hidden=True)
@click.argument('remote')
@click.pass_obj
def _(context, remote):
    """List files on a remote."""
    backend = context.create_backend(remote)
    for path in backend.list():
        print(path)

#-----------------------------------------------------------------------------
# Command: dump
#-----------------------------------------------------------------------------

@main.command('dump', hidden=True)
@click.pass_obj
def _(context):
    """Dump the catalog to stdout.

    This is mainly for debugging the catalog parser and writer. The output
    should be identical to the input catalog file.
    """
    context.load_catalog().write(sys.stdout)

#-----------------------------------------------------------------------------
# Command: mhash
#-----------------------------------------------------------------------------

@main.command('mhash', hidden=True)
@click.argument('file')
@click.pass_obj
def _(context, file):
    """Calculate the mhash of an MP3 file."""
    with open(file, 'rb') as f:
        mhash = mp3_import(f, None, None)
    print(mhash)

#-----------------------------------------------------------------------------

if __name__ == '__main__':
    try:
        main(help_option_names=['-h', '--help'])
    except (CatalogError, subprocess.CalledProcessError) as e:
        die(e)

# vim:tw=78
