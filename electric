#!/usr/bin/env python3
##############################################################################
#
#         ,/
#       ,'/
#     ,' /___,  888888 88     888888  dP""b8 888888 88""Yb 88  dP""b8
#   .'__   ,'   88__   88     88__   dP   `"   88   88__dP 88 dP   `"
#      / ,'     88""   88  .o 88""   Yb        88   88"Yb  88 Yb
#     /,'       888888 88ood8 888888  YboodP   88   88  Yb 88  YboodP
#    /'
#
# ----------------------------------------------------------------------------
#                           Music Library Manager
# ----------------------------------------------------------------------------
#
#   Copyright (c) 2024-2025 Daniel Li
#
#   This software is available under the MIT License.
#
#   Dependencies:
#     - python 3.8
#     - ffmpeg (optional): import normalization
#     - adb (optional): adb backend
#
##############################################################################

from collections import Counter, namedtuple
import datetime
import hashlib
import optparse
import os
import re
import shutil
import subprocess
import sys

# output newline on all platforms
sys.stdout.reconfigure(newline='\n')

default_root = os.path.dirname(os.path.realpath(__file__))

id_regex = re.compile(r'[1-9][0-9]*')
date_regex = re.compile(r'([0-9]{4})-([0-9]{2})-([0-9]{2})')
artist_regex = re.compile(r'[#0-9a-z]+(?:-[#0-9a-z]+)*')
title_regex = artist_regex
mhash_regex = re.compile(r'[0-9a-f]{64}')

##############################################################################
# Utility Functions
##############################################################################

def err(message):
    sys.stderr.write(f'\033[1;31merror:\033[0m {message}\n')

def warn(message):
    sys.stderr.write(f'\033[1;33mwarning:\033[0m {message}\n')

def msg(message):
    sys.stderr.write(f'{message}\n')

def confirm(prompt, default=False):
    """
    Prompt the user for confirmation.

    If the response is empty (ie. the user simply pressed Enter),
    the specified default is returned if provided, otherwise False.
    If the response is 'Y' or 'y', returns True, otherwise returns False.
    """
    options = '[Y/n]' if default else '[y/N]'
    sys.stderr.write(f'{prompt} {options} ')
    reply = input()
    return default if len(reply) == 0 else reply == 'y' or reply == 'Y'

def safe_rename(src, dest):
    # not actually safe
    if os.path.exists(dest):
        raise FileExistsError(dest)
    os.rename(src, dest)

def hash_file(f, dest=None):
    # Based on file_digest() from the standard library
    # https://github.com/python/cpython/blob/main/Lib/hashlib.py
    buf = bytearray(65536)
    view = memoryview(buf)
    digest = hashlib.sha256()
    while size := f.readinto(buf):
        digest.update(view[:size])
        if dest is not None:
            dest.write(view[:size])
    return digest.hexdigest()

##############################################################################
# ID3
##############################################################################

# Resources:
#   - https://mutagen-specs.readthedocs.io/en/latest/id3/id3v2.4.0-structure.html
#   - https://mutagen-specs.readthedocs.io/en/latest/id3/id3v2.4.0-frames.html
#   - https://en.wikipedia.org/wiki/MP3#File_structure
#   - http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
#   - https://www.datavoyage.com/mpgscript/mpeghdr.htm (same)
#   - http://gabriel.mp3-tech.org/mp3infotag.html
#   - https://forum.powerbasic.com/forum/user-to-user-discussions/programming/54515-lame-header-frame

id3_header = b'ID3\x04\x00\x00\x00\x00\x01\x76'

def id3_encode_uint28(x):
    return bytes((x >> 21 & 0x7f, x >> 14 & 0x7f, x >> 7 & 0x7f, x & 0x7f))

def id3_encode_frame(id, content):
    return id + id3_encode_uint28(len(content)) + b'\x00\x00' + content

def id3_encode_text(id, content):
    return id3_encode_frame(id, b'\x03' + content.encode('utf-8') + b'\x00')

def id3_encode(title, artist, album):
    """Encode song tags as a 256-byte ID3v2.4.0 header."""
    data = (id3_header
        + id3_encode_text(b'TIT2', title)
        + id3_encode_text(b'TPE1', artist)
        + id3_encode_text(b'TALB', album))
    if len(data) > 256:
        raise ValueError('ID3 tag exceeds 256 bytes')
    data = data.ljust(256, b'\x00')
    assert len(data) == 256
    return data

def id3_write(file, data):
    assert len(data) == 256
    with open(file, 'r+b') as f:
        if f.read(10) != id3_header:
            raise RuntimeError('Invalid ID3 header')
        assert f.tell() == 10
        f.write(data[10:])

##############################################################################
# Songs
##############################################################################

class Song:
    """
    Represents a song in the catalog.

    All attributes are readonly except for `mhash`. Note that changing `mhash`
    will cause the computed path to change as well. `mhash` may be None, which
    indicates that the song does not have an associated file; this could mean
    that the song is currently being imported.
    """

    def __init__(self, id, date, artist, title, mhash):
        self.id = id
        self.date = date
        self.artist = artist
        self.title = title
        self.mhash = mhash

        # The artist name and song title are generated by converting their
        # respective identifiers to uppercase and replacing dashes with spaces.
        self.title_tag = title.upper().replace('-', ' ')
        self.artist_tag = artist.upper().replace('-', ' ')
        self.album_tag = f'E{self.id:04}'

    def __str__(self):
        return f'E{self.id:04} ({self.artist}.{self.title})'

    @property
    def file(self):
        assert self.mhash is not None
        return f'{self.id:04}.{self.mhash[:12]}.mp3'

    def write(self, f):
        id = self.id
        date = self.date.strftime('%Y-%m-%d')
        artist = self.artist
        title = self.title
        mhash = '-' if self.mhash is None else self.mhash
        f.write(f'{id} {date} {artist} {title} {mhash}\n')

    def encode_id3(self):
        return id3_encode(self.title_tag, self.artist_tag, self.album_tag)

##############################################################################
# Catalog
##############################################################################

class CatalogError(Exception):
    pass

class Catalog:
    def __init__(self):
        self._songs = []

    def __len__(self):
        return len(self._songs)

    def __getitem__(self, id):
        return self._songs[id - 1]

    def __iter__(self):
        return iter(self._songs)

    def __reversed__(self):
        return reversed(self._songs)

    def __contains__(self, id):
        return id >= 1 and id <= len(self._songs)

    def add(self, id, date, artist, title, mhash):
        lastid = len(self._songs)
        if id > 9999:
            raise CatalogError(f'ID too large: {id}')
        if id != lastid + 1:
            raise CatalogError(f'Attempted to add non-consecutive {id} after {lastid}')
        song = Song(id, date, artist, title, mhash)
        self._songs.append(song)
        return song

    def register(self, artist, title, mhash):
        date = datetime.date.today()
        return self.add(len(self._songs) + 1, date, artist, title, mhash)

    def get(self, id):
        return self._songs.get(id)

    def parse_line(self, line):
        fields = line.split(' ')
        if len(fields) != 5:
            raise CatalogError(f'Expected 5 fields but {len(fields)} present')
        id, date, artist, title, mhash = fields

        if not id_regex.fullmatch(id):
            raise CatalogError(f'Invalid id {id!r}')
        id = int(id)

        if date == '-':
            date = datetime.date.today()
        else:
            if not (match := date_regex.fullmatch(date)):
                raise CatalogError(f'Invalid date {date!r}')
            y, m, d = match.groups()
            date = datetime.date(int(y), int(m), int(d))

        if not artist_regex.fullmatch(artist):
            raise CatalogError(f'Invalid artist {artist!r}')

        if not title_regex.fullmatch(title):
            raise CatalogError(f'Invalid title {title!r}')

        if mhash == '-':
            mhash = None
        elif not mhash_regex.fullmatch(mhash):
            raise CatalogError(f'Invalid mhash {mhash!r}')

        self.add(id, date, artist, title, mhash)

    def write(self, f):
        """Write the catalog to a file object."""
        for song in self:
            song.write(f)

    def save(self, file):
        tmpfile = file + '.lock'
        tmpf = open(tmpfile, 'x', newline='\n')
        try:
            with tmpf:
                self.write(tmpf)
        except:
            os.remove(tmpfile)
            raise
        os.replace(tmpfile, file)

def read_catalog(f):
    """Read the catalog from a file object."""

    catalog = Catalog()
    lineno = 0
    try:
        for line in f:
            # increment line number before the loop to catch continue
            lineno += 1
            # remove trailing newline
            line = line[:-1]
            catalog.parse_line(line)
    except CatalogError as e:
        raise CatalogError(f'Line {lineno}: {e}')
    return catalog

##############################################################################
# Backends
##############################################################################

backends = {}

def backend(protocol):
    def decorator(cls):
        backends[protocol] = cls
        return cls
    return decorator

# Backends must implement these methods:
#
#   __init__(param)
#       Creates the backend from the user-supplied parameter.
#
#   list()
#       Returns a list of files in the backend.
#
#   sync(local_dir, pulls, pushes, retags, prunes)
#       Executes the specified updates on the remote.
#           - local_dir: the local music directory
#           - pulls: list of files to pull
#           - pushes: list of files to push
#           - retags: list of (file, data) to update tags
#           - prunes: list of files to remove
#

@backend('file')
class FileBackend:
    def __init__(self, param):
        self.target_dir = param

    def list(self):
        return sorted(
            file
            for file in os.listdir(self.target_dir)
            if file.endswith('.mp3'))

    def sync(self, local_dir, pulls, pushes, retags, prunes):
        for file in pulls:
            msg(f'Pulling {file}')
            srcfile = os.path.join(self.target_dir, file)
            destfile = os.path.join(local_dir, file)
            shutil.copyfile(srcfile, destfile)

        for file in pushes:
            msg(f'Pushing {file}')
            srcfile = os.path.join(local_dir, file)
            destfile = os.path.join(self.target_dir, file)
            shutil.copyfile(srcfile, destfile)

        for file, data in retags:
            msg(f'Retagging {file}')
            id3_write(os.path.join(self.target_dir, file), data)

        for file in prunes:
            msg(f'Removing {file}')
            os.remove(os.path.join(self.target_dir, file))

@backend('adb')
class AdbBackend:
    def __init__(self, param):
        self.target_dir = param or '/storage/emulated/0/Music/core'

    def list(self):
        output = subprocess.run(
            ['adb', 'shell', f'ls \'{self.target_dir}\''],
            stdout=subprocess.PIPE,
            text=True, check=True).stdout
        return [
            file
            for file in output.splitlines()
            if file.endswith('.mp3')]

    def sync(self, local_dir, pulls, pushes, retags, prunes):
        for file in pulls:
            msg(f'Pulling {file}')
            srcfile = f'{self.target_dir}/{file}'
            destfile = os.path.join(local_dir, file)
            subprocess.run(['adb', 'pull', srcfile, destfile], check=True)

        for file in pushes:
            msg(f'Pushing {file}')
            srcfile = os.path.join(local_dir, file)
            destfile = f'{self.target_dir}/{file}'
            subprocess.run(['adb', 'push', srcfile, destfile], check=True)

        if prunes:
            commands = [f'set -e\ncd \'{self.target_dir}\'\nrm -v']
            for file in prunes:
                commands.append(f' \'{file}\'')
            commands.append('\n')
            subprocess.run(
                ['adb', 'shell'],
                input=''.join(commands),
                text=True, check=True)

##############################################################################
# Import
##############################################################################


def import_song(song, music_dir, srcfile):
    assert song.mhash is None

    tmpfile = os.path.join(music_dir, '.import~.mp3')
    tmpdestfile = os.path.join(music_dir, '.import~2.mp3')

    # Normalize using ffmpeg. This does a few things:
    #
    #   - makes sure it's actually a MP3
    #   - removes the cover art
    #   - removes the ID3 tag, we handle that ourselves
    #   - gets a Xing/LAME header so ffprobe doesn't complain
    #
    # The file is not recoded, so it should be safe to import a file from the
    # library again without data loss, although there's currently no known use
    # for this feature.

    subprocess.run([
        'ffmpeg', '-y',
        '-hide_banner',
        '-loglevel', 'warning',
        '-stats',
        '-i', srcfile,
        '-map', '0:a', # select audio only, remove cover art
        '-f', 'mp3',
        '-c', 'copy',
        '-map_metadata', '-1',
        '-id3v2_version', '0', # strip tags
        '-bitexact',
        tmpfile
    ], check=True)

    with (open(tmpfile, 'rb') as f,
          open(tmpdestfile, 'wb') as destf):
        destf.write(song.encode_id3())
        mhash = hash_file(f, destf)

    os.remove(tmpfile)
    os.chmod(tmpdestfile, 0o444)

    # the correct `destfile` is only known after calculating the mhash
    song.mhash = mhash
    destfile = os.path.join(music_dir, song.file)
    safe_rename(tmpdestfile, destfile)

def import_from_queue(context, catalog, *, noconfirm):
    import_files = []
    try:
        with os.scandir(context.import_dir) as entries:
            for entry in entries:
                file = entry.name
                if not file.endswith('.mp3'):
                    continue
                try:
                    id = int(file[:-4])
                except ValueError:
                    warn(f'invalid import filename {file!r}')
                    continue
                if id not in catalog:
                    warn(f'no such song: {id}')
                    continue
                song = catalog[id]
                if song.mhash is not None:
                    warn(f'song is already imported: {song}')
                    continue
                import_files.append((song, entry.path))
    except FileNotFoundError:
        pass

    if not import_files:
        return

    import_files.sort(key=lambda entry: entry[0].id)
    for song, file in import_files:
        msg(f'\033[1;32mimport:\033[0;1m {song}\033[0m')

    if not (noconfirm or confirm('Proceed?', True)):
        return

    for song, file in import_files:
        msg(f'Importing {song}')
        import_song(song, context.music_dir, file)
    context.save_catalog(catalog)
    for song, file in import_files:
        os.remove(file)

##############################################################################
# Command-Line Parsing
##############################################################################

commands = {}

def command(name):
    def decorator(fn):
        commands[name] = fn
        return fn
    return decorator

class OptionParser(optparse.OptionParser):
    def error(self, message):
        err(message)
        sys.exit(2)

class Context:
    def __init__(self, root):
        self.root = root
        self.catalog_file = os.path.join(root, 'catalog.txt')
        self.music_dir = os.path.join(root, 'core')
        self.import_dir = os.path.join(root, 'queue')

    def load_catalog(self):
        try:
            with open(self.catalog_file) as f:
                return read_catalog(f)
        except (OSError, CatalogError) as e:
            err(f'failed to load catalog: {e}')
            sys.exit(1)

    def save_catalog(self, catalog):
        catalog.save(self.catalog_file)

    def create_backend(self, param):
        protocol, sep, param = param.partition(':')
        if not sep:
            param = protocol
            protocol = 'file'
        cls = backends.get(protocol)
        if cls is None:
            err(f'unrecognized protocol {protocol!r}')
            sys.exit(2)
        return cls(param)

def main():
    prog = os.path.basename(sys.argv[0])
    parser = OptionParser(
        prog=prog,
        usage='%prog [options] COMMAND [...]')
    parser.disable_interspersed_args()
    parser.add_option('-r', '--root', metavar='DIR', default=default_root, help='root directory [default: %default]')
    opts, args = parser.parse_args()

    if not args:
        parser.print_help()
        sys.exit(2)

    command = args[0]
    fn = commands.get(command)
    if fn is None:
        parser.error(f'invalid command {command!r}')

    context = Context(opts.root)
    parser = OptionParser(
        prog=f'{prog} {command}',
        description=fn.__doc__)
    fn(context, parser, args[1:])

#-----------------------------------------------------------------------------
# Command: sync
#-----------------------------------------------------------------------------

class SyncRemote:
    def __init__(self, context, param):
        self.backend = context.create_backend(param)
        self.files = self.backend.list()
        self.pulls = []
        self.pushes = []
        self.prunes = []

@command('sync')
def _(context, parser, args):
    """Update the music library."""

    parser.set_usage('%prog [options] [REMOTES...]')
    parser.add_option('-i', '--import', dest='import_queue', action='store_true', help='import from queue directory')
    parser.add_option('-n', '--dry-run', action='store_true', help='do nothing, only show what would happen')
    parser.add_option('-y', '--yes', action='store_true', help='do not prompt for confirmation')
    parser.add_option('--prune', action='store_true', help='prune extraneous music files')
    opts, args = parser.parse_args(args)

    catalog = context.load_catalog()

    if opts.import_queue:
        import_from_queue(context, catalog, noconfirm=opts.yes)

    remotes = tuple(SyncRemote(context, arg) for arg in args)

    local_files = sorted(
        file
        for file in os.listdir(context.music_dir)
        if file.endswith('.mp3'))

    has_actions = False
    prunes = []

    for song in catalog:
        # ignore songs without an associated file
        if song.mhash is None:
            continue

        try:
            local_files.remove(song.file)
        except ValueError:
            # the song doesn't exist locally, try to find it on a remote
            for remote in remotes:
                if song.file in remote.files:
                    msg(f'\033[1;36mpull:\033[0;1m {song}\033[0m')
                    remote.pulls.append(song.file)
                    has_actions = True
                    break
            else:
                warn(f'unable to find source for {song}')
                continue

        # send the file to any remotes that don't have it
        for remote in remotes:
            try:
                remote.files.remove(song.file)
            except ValueError:
                msg(f'\033[1;36mpush:\033[0;1m {song}\033[0m')
                remote.pushes.append(song.file)
                has_actions = True

    # find local files to prune
    for file in local_files:
        if opts.prune:
            msg(f'\033[1;31mprune:\033[0m {file}')
            prunes.append(file)
            has_actions = True
        else:
            warn(f'extraneous file: {file}')

    # find remote files to prune
    for remote in remotes:
        for file in remote.files:
            if opts.prune:
                msg(f'\033[1;31mprune:\033[0m {file}')
                remote.prunes.append(file)
                has_actions = True
            else:
                warn(f'extraneous file: {file}')

    if opts.dry_run or not has_actions:
        return
    if not (opts.yes or confirm('Proceed?', True)):
        sys.exit(2)

    for remote in remotes:
        remote.backend.sync(
            context.music_dir,
            remote.pulls,
            remote.pushes,
            [],
            remote.prunes)

    for file in prunes:
        msg(f'Removing {file}')
        os.remove(os.path.join(context.music_dir, file))

#-----------------------------------------------------------------------------
# Command: check
#-----------------------------------------------------------------------------

@command('check')
def _(context, parser, args):
    """Check file integrity."""

    opts, args = parser.parse_args(args)

    catalog = context.load_catalog()
    ok = 0
    total = 0
    for song in catalog:
        file = song.file
        total += 1
        try:
            with open(os.path.join(context.music_dir, file), 'rb') as f:
                if f.read(10) != id3_header:
                    err(f'{file}: invalid ID3 header')
                    continue
                f.seek(256)
                mhash = hash_file(f)
                if mhash != song.mhash:
                    err(f'{file}: corrupt file')
                    continue
        except FileNotFoundError:
            err(f'{file}: file not found')
            continue
        ok += 1
    print(f'{ok} ok, {total - ok} bad, {total} total')
    if ok != total:
        sys.exit(1)

#-----------------------------------------------------------------------------
# Command: info
#-----------------------------------------------------------------------------

@command('info')
def _(context, parser, args):
    """Print information about the catalog."""

    parser.add_option('-l', '--latest', default=10, metavar='N', help='show N latest songs')
    parser.add_option('-a', '--artists', default=10, metavar='N', help='show N most common artists')
    opts, args = parser.parse_args(args)

    catalog = context.load_catalog()

    print(f'{len(catalog)} songs')

    if opts.latest > 0:
        print(f'\nLatest {opts.latest} songs:')
        for song in reversed(catalog):
            print(f'  {song}')
            opts.latest -= 1
            if opts.latest == 0:
                break

    if opts.artists > 0:
        counter = Counter(song.artist for song in catalog)
        top = counter.most_common(opts.artists)
        width = max(len(artist) for artist, count in top)
        print(f'\nTop {opts.artists} artists:')
        for artist, count in top:
            print(f'  {artist.rjust(width)}  {"*" * count} ({count})')

#-----------------------------------------------------------------------------
# Command: ls-remote
#-----------------------------------------------------------------------------

@command('ls-remote')
def _(context, parser, args):
    """List files on a remote."""

    parser.set_usage('%prog [options] REMOTE')
    opts, args = parser.parse_args(args)
    if len(args) != 1:
        parser.error('expected remote argument')

    backend = context.create_backend(args[0])
    for file in backend.list():
        print(file)

#-----------------------------------------------------------------------------
# Command: dump
#-----------------------------------------------------------------------------

@command('dump')
def _(context, parser, args):
    """Dump the catalog to stdout."""

    parser.parse_args(args)
    context.load_catalog().write(sys.stdout)

#-----------------------------------------------------------------------------

del backend, command

if __name__ == '__main__':
    main()

# vim:tw=78
