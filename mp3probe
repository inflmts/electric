#!/usr/bin/env python3
#
# Documentation:
#   - https://mutagen-specs.readthedocs.io/en/latest/id3/id3v2.4.0-structure.html
#   - https://mutagen-specs.readthedocs.io/en/latest/id3/id3v2.4.0-frames.html
#   - https://en.wikipedia.org/wiki/MP3#File_structure
#   - http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
#   - https://www.datavoyage.com/mpgscript/mpeghdr.htm (same)
#   - http://gabriel.mp3-tech.org/mp3infotag.html
#   - https://forum.powerbasic.com/forum/user-to-user-discussions/programming/54515-lame-header-frame
#

from collections import namedtuple
import optparse
import re

trans_table = bytes(i if i > 0x1f and i < 0x7f else 0x2e for i in range(256))
bitrate_table = [None, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, None]
frequency_table = [44100, 48000, 32000, None]

class ProbeError(Exception):
    pass

Frame = namedtuple('Frame', ('bitrate', 'frequency', 'size', 'xing'))

def read_exact(f, size):
    b = f.read(size)
    if len(b) < size:
        raise ProbeError('unexpected end of file')
    return b

def hexdump(b):
    for i in range(0, len(b), 16):
        line = b[i:i+16]
        print(f'  {i:08x}: {line.hex(" "):47}  {line.translate(trans_table).decode("ascii")}')

def decode_int28(b):
    return (b[0] & 0x7f) << 21 | (b[1] & 0x7f) << 14 | (b[2] & 0x7f) << 7 | (b[3] & 0x7f)

def probe_frame(f, check_xing=False, dump_xing=False):
    header = f.read(4)
    if len(header) < 4:
        return None
    b0, b1, b2, b3 = header

    if b0 != 0b11111111 or b1 & 0b11111110 != 0b11111010:
        raise ProbeError(f'unrecognized frame header ({header.hex(" ")})')
    bitrate = bitrate_table[b2 >> 4 & 0b1111]
    if bitrate is None:
        raise ProbeError('invalid bitrate index')
    frequency = frequency_table[b2 >> 2 & 0b11]
    if frequency is None:
        raise ProbeError('invalid frequency index')
    padding = b2 >> 1 & 0b1
    if b2 & 0b1:
        raise ProbeError('private bit set')
    if b3 & 0b11:
        raise ProbeError('emphasis bit set')

    size = 144000 * bitrate // frequency + padding
    frame = read_exact(f, size - 4)
    xing = False
    if check_xing and frame[0x20:0x24] in (b'Xing', b'Info'):
        xing = True
        if dump_xing:
            print()
            hexdump(header + frame[0:188])
            print()

    return Frame(bitrate, frequency, size, xing)

def probe(f, dump_xing=False):
    header = read_exact(f, 10)
    if header[0:3] != b'ID3':
        raise ProbeError('id3: invalid magic')
    id3_major = header[3]
    id3_minor = header[4]
    if header[5] != 0:
        raise ProbeError(f'id3: unrecognized flags ({header[5]:8b})')
    id3_size = decode_int28(header[6:10])
    read_exact(f, id3_size)

    index = 0
    offset = id3_size + 10
    bitrate = None
    frequency = None
    duration = 0.0
    xing = False

    while True:
        try:
            frame = probe_frame(f, index == 0, dump_xing=dump_xing)
        except ProbeError as e:
            raise ProbeError(f'frame {index} (+{offset}): {e}')
        if frame is None:
            break
        if bitrate is None:
            bitrate = frame.bitrate
        elif bitrate != frame.bitrate:
            bitrate = 0
        if frequency is None:
            frequency = frame.frequency
        elif frequency != frame.frequency:
            frequency = 0
        if frame.xing:
            xing = True
        else:
            duration += 1152 / frame.frequency
        index += 1
        offset += frame.size

    print(
        f'  id3v2.{id3_major}.{id3_minor}(len={id3_size + 10})'
        f' {"xing" if xing else "noxing"}'
        f' {int(duration // 60):02}:{duration % 60:06.3f}'
        f' {bitrate}kbps'
        f' {frequency}Hz'
    )

def main():
    parser = optparse.OptionParser(usage='%prog [options] FILE...')
    parser.add_option('-x', '--dump-xing', action='store_true')
    opts, files = parser.parse_args()
    for file in files:
        print(f'{file}:')
        with open(file, 'rb') as f:
            try:
                probe(f, dump_xing=opts.dump_xing)
            except ProbeError as e:
                print(f'  error: {e}')

if __name__ == '__main__':
    main()
